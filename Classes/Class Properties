myClass myObject = new myClass();

//Here is a full classs but lets build it ground up 
class Shape{
  public string Type = "square";
  public int Sides = 4;
  public int Sidelength = 1;
  public double Area = 1;
}

//class with attributes 
class Shape{
  public string Type;
  public int Sides;
  public int Sidelength;
  public double Area;  
}

//have a NULL case ready so you can make it and define it later
class Shape{
  public string Type;
  public int Sides;
  public int Sidelength;
  public double Area;  
  public Shape(){} 
}

//now lets cusomize that null case thats not really a null case more of a place holder 
// -----------------------MAKE CLASS ATTRIBUTES NAMES WITH UPPER CASE so you can be lazy like this 
class Shape{
  public string Type;
  public int Sides;
  public int Sidelength;
  public double Area;  
  public Shape(string type, int sides, int sidelength, double area){
    Type = type;
    Sides = sides;
    Sidelength = sidelength;
    Area = area;
  }
}
//we can make soume cool stuff here 
using System;
class Shape{
  public string Type;
  public int Sides;
  public int Sidelength;
  public double Area;  
  public Shape(string type, int sides, int sidelength, double area){
    Type = type;
    Sides = sides;
    Sidelength = sidelength;
    Area = area;
  }
}
class MainClass{
  public static void Main(){
    Shape square = new Shape("square", 4, 1, 1);
    Shape bigsquare = new Shape("square", 4, 2, 4);
    Shape triangle = new Shape("triangle", 3, 3, 3.9);
    Console.WriteLine("A {0} with {1} sides of length {2} has an area of {3}", square.Type, square.Sides, square.Sidelength, square.Area);
    Console.WriteLine("A {0} with {1} sides of length {2} has an area of {3}", bigsquare.Type, bigsquare.Sides, bigsquare.Sidelength, bigsquare.Area);
    Console.WriteLine("A {0} with {1} sides of length {2} has an area of {3}", triangle.Type, triangle.Sides, triangle.Sidelength, triangle.Area);
  }
}


//-------------------------------Example:Make a class Vehicle with the properties string Type, int NumTires, int Year, and bool Runs, and create:

//A car: Type = car with NumTires = 4 from Year = 2000 which Runs = true An oldcar: Type = car with NumTires = 4 from Year = 1980 which Runs = false 
//A bike: Type = bike with NumTires = 2 from Year = 2017 which Runs = true


using System;
class Vehicle{
 	public string Type;   
    public int NumTires;
    public int Year;
    public bool Runs;
    public Vehicle(string type, int numTires, int year, bool runs)
    {
     Type = type;
     NumTires = numTires;
     Year = year; 
     Runs = runs;   
    }
    
}

//Write Vehicle class here

public class MainClass{
    public static void Main(){
        //Create vehicles here
        
        // Test code
        
        Vehicle car = new Vehicle("car",4,2000,true);
        Vehicle oldcar = new Vehicle("car",4,1980,false);
        Vehicle bike = new Vehicle("bike",2,2017,true);
        
        Console.WriteLine(car.Type);
        Console.WriteLine(oldcar.Runs);
        Console.WriteLine(bike.NumTires);
    }
}
